{"version":3,"sources":["common/Filter.tsx","components/Cards/CardsList.tsx","common/Header.tsx","helpers/util.tsx","common/Footer.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["animatedComponents","makeAnimated","Filters","props","Row","className","style","position","top","zIndex","Col","xs","sm","isMulti","value","filter","name","options","genres","classNamePrefix","placeholder","components","onChange","handleChange","isClearable","isSearchable","releaseYear","CardsList","isLoading","textAlign","paddingTop","role","videos","length","slice","cardsCount","map","image_url","artist","title","id","lg","Card","outline","color","maxHeight","CardImg","width","height","objectFit","src","alt","CardBody","CardTitle","tag","CardSubtitle","Header","Navbar","light","expand","minHeight","Container","NavbarBrand","onClick","window","location","reload","removeDuplicates","data","key","v","i","origArray","findIndex","t","Footer","background","App","useState","setGenres","origVideos","setOrigVideos","setVideos","setReleaseYear","action","setFilter","setIsLoading","error","setError","setCardsCount","useEffect","a","fetch","response","json","label","release_year","console","log","fetchData","genre_id","x","includes","Object","keys","Button","Filter","option","cursor","fontWeight","textDecoration","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5ba295a5.chunk.js","sourcesContent":["import { Col, Row } from \"reactstrap\";\nimport Select from \"react-select\";\nimport makeAnimated from \"react-select/animated\";\n\ninterface FilterProps {\n  filter: { action: string };\n  genres: any[];\n  handleChange: (\n    option: any,\n    { action, name }: { action: any; name: any }\n  ) => void;\n  releaseYear: string;\n}\n\nconst animatedComponents = makeAnimated();\n\nconst Filters = (props: FilterProps) => (\n  <Row\n    className=\"justify-content-center\"\n    style={{ position: \"sticky\", top: 0, zIndex: 100000 }}\n  >\n    <Col xs={12} sm={5} className=\"m-2\">\n      <Select\n        isMulti\n        value={props.filter[\"genre\"]}\n        name=\"genre\"\n        options={props.genres}\n        className=\"basic-multi-select\"\n        classNamePrefix=\"select\"\n        placeholder=\"Select Genres...\"\n        components={animatedComponents}\n        onChange={props.handleChange}\n      />\n    </Col>\n    <Col xs={12} sm={5} className=\"m-2\">\n      <Select\n        value={props.filter[\"RY\"]}\n        className=\"basic-single\"\n        classNamePrefix=\"select\"\n        isClearable={true}\n        isSearchable={true}\n        name=\"RY\"\n        placeholder=\"Select Year...\"\n        options={props.releaseYear}\n        onChange={props.handleChange}\n      />\n    </Col>\n  </Row>\n);\n\nexport default Filters;\n","import {\n  Card,\n  CardImg,\n  CardTitle,\n  CardSubtitle,\n  CardBody,\n  Col,\n  Row\n} from \"reactstrap\";\n\ninterface CardsListProps {\n    isLoading: Boolean;\n    videos: any[];\n    cardsCount: number;\n  }\n\n//Show Cards List\nconst CardsList = (props: CardsListProps) => (\n  <Row>\n    {/* Show Loader */}\n    {props.isLoading ? (\n      <div\n        style={{\n          textAlign: \"center\",\n          paddingTop: \"9rem\"\n        }}\n      >\n        <div className=\"spinner-border\" role=\"status\"></div>\n      </div>\n    ) : props.videos.length === 0 ? (\n      // Handle no data found\n      <div\n        style={{\n          textAlign: \"center\",\n          paddingTop: \"9rem\"\n        }}\n      >\n        No Music Found!\n      </div>\n    ) : (\n      //Paginated view of cards\n      props.videos\n        .slice(0, props.cardsCount)\n        .map(({ image_url, artist, title, id }: any) => (\n          <Col sm=\"4\" xs=\"12\" lg=\"3\" key={id}>\n            <Card\n              outline\n              color=\"success\"\n              className=\"m-2 text-center\"\n              style={{ maxHeight: \"20rem\" }}\n            >\n              <CardImg\n                style={{\n                  width: \"100%\",\n                  height: \"50vw\",\n                  objectFit: \"cover\"\n                }}\n                src={image_url}\n                alt={title}\n              />\n              <CardBody>\n                <CardTitle tag=\"h6\">{artist}</CardTitle>\n                <CardSubtitle tag=\"h6\" className=\"mb-2 text-muted\">\n                  {title}\n                </CardSubtitle>\n              </CardBody>\n            </Card>\n          </Col>\n        ))\n    )}\n  </Row>\n);\n\nexport default CardsList;\n","import { Container, Navbar, NavbarBrand } from \"reactstrap\";\n\nconst Header = () => (\n  <Navbar color=\"light\" light expand=\"md\" style={{ minHeight: \"10vh\" }}>\n    <Container>\n      <NavbarBrand\n        className=\"cursor-pointer\"\n        onClick={() => window.location.reload()}\n      >\n        My Music App\n      </NavbarBrand>\n    </Container>\n  </Navbar>\n);\n\nexport default Header;\n","//remove duplicates by key in array of objects\nfunction removeDuplicates(data: any[], key: string) {\n  return data.filter(\n    (v: Object, i: Number, origArray: Array<[Object]>) =>\n      origArray.findIndex((t: Object) => t[key] === v[key]) === i\n  );\n}\n\nexport { removeDuplicates };\n","import { Container, Navbar, NavbarBrand } from \"reactstrap\";\n\nconst Footer = () => (\n  <Navbar\n    style={{ background: \"#252729\", minHeight: \"10vh\" }}\n    expand=\"md\"\n    className=\"mt-2\"\n  >\n    <Container>\n      <NavbarBrand\n        className=\"cursor-pointer\"\n        onClick={() => window.location.reload()}\n      >\n        © My Music App\n      </NavbarBrand>\n    </Container>\n  </Navbar>\n);\n\nexport default Footer;\n","import React, { useState, useEffect } from \"react\";\nimport { Button, Container } from \"reactstrap\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport Filters from \"./common/Filter\";\nimport CardsList from \"./components/Cards/CardsList\";\nimport Header from \"./common/Header\";\nimport { removeDuplicates } from \"./helpers/util\";\nimport Footer from \"./common/Footer\";\n\ninterface IKeys {\n  value: number;\n  label: string;\n}\n\nfunction App() {\n  const [genres, setGenres] = useState([]);\n  const [origVideos, setOrigVideos] = useState([]);\n  const [videos, setVideos] = useState([]);\n  const [releaseYear, setReleaseYear] = useState<any>([]);\n  const [filter, setFilter] = useState({ action: \"\" });\n  const [isLoading, setIsLoading] = useState<Boolean>(false);\n  const [error, setError] = useState<Object>();\n  const [cardsCount, setCardsCount] = useState<number>(12);\n\n  //Handle async api call\n  useEffect(() => {\n    const url =\n      \"https://raw.githubusercontent.com/XiteTV/frontend-coding-exercise/main/data/dataset.json\";\n\n    const fetchData = async () => {\n      try {\n        const response = await fetch(url);\n        setIsLoading(true);\n        const json = await response.json();\n        setIsLoading(false);\n\n        //set genres from dataset for genre filter\n        setGenres(\n          json.genres.map(\n            ({ id, name }) =>\n              ({\n                value: id,\n                label: name\n              } as IKeys)\n          )\n        );\n\n        //set release year from dataset for year filter\n        setReleaseYear(\n          //remove year duplicates\n          removeDuplicates(\n            json.videos.map(\n              ({ release_year }) =>\n                ({\n                  value: release_year,\n                  label: release_year\n                } as IKeys)\n            ),\n            \"value\"\n          )\n        );\n        setVideos(json.videos);\n        setOrigVideos(json.videos);\n      } catch (error) {\n        console.log(\"error\", error);\n        setError(error);\n      }\n    };\n\n    fetchData();\n  }, []);\n\n  //Set Filters in state\n  const handleChange = (option, { action, name }) => {\n    setFilter({ ...filter, action: action, [name]: option });\n  };\n\n  const loadMoreCards = () => {\n    setCardsCount(cardsCount + 12);\n  };\n\n  //Handle different scenarios of filters being set\n  useEffect(() => {\n    //When Genre is set but year is not set\n    if (filter[\"genre\"] && !filter[\"RY\"]) {\n      //When genre is not set\n      !filter[\"genre\"].length\n        ? setVideos(origVideos)\n        : setVideos(\n            origVideos.filter(({ genre_id }: any) =>\n              filter[\"genre\"].map((x: any) => x.value).includes(genre_id)\n            )\n          );\n    }\n    //When Genre is not set but year is set\n    else if (filter[\"RY\"] && !filter[\"genre\"]) {\n      !filter[\"RY\"]\n        ? setVideos(origVideos)\n        : setVideos(\n            origVideos.filter((x: any) => filter[\"RY\"].value === x.release_year)\n          );\n    }\n    //When Genre is not set but year is set.\n    // When user tries to change the year\n    else if (\n      Object.keys(filter).includes(\"RY\") &&\n      !filter[\"genre\"] &&\n      filter.action === \"clear\"\n    ) {\n      setVideos(origVideos);\n    }\n    // When Genre is set and year is not set\n    else if (filter[\"genre\"] && !filter[\"RY\"]) {\n      setVideos(\n        videos.filter((x: any) => filter[\"RY\"].value === x.release_year)\n      );\n    }\n    // When genre and year are both set\n    else if (filter[\"genre\"] && filter[\"RY\"]) {\n      //when genre filter is cleared/not set\n      !filter[\"genre\"].length\n        ? setVideos(\n            origVideos.filter((x: any) => filter[\"RY\"].value === x.release_year)\n          )\n        : setVideos(\n            origVideos.filter(\n              (x: any) =>\n                filter[\"RY\"].value === x.release_year &&\n                filter[\"genre\"].map((x: any) => x.value).includes(x.genre_id)\n            )\n          );\n    }\n  }, [filter]);\n\n  return (\n    <div>\n      <Header />\n      <Container style={{ minHeight: \"80vh\" }}>\n        {/* Show Errors! */}\n        {error ? (\n          <div\n            style={{\n              textAlign: \"center\",\n              paddingTop: \"9rem\"\n            }}\n          >\n            Error!\n            <Button color=\"link\" onClick={() => window.location.reload()}>\n              Refresh Page\n            </Button>\n          </div>\n        ) : (\n          <>\n            <Filters\n              filter={filter}\n              genres={genres}\n              handleChange={handleChange}\n              releaseYear={releaseYear}\n            />\n            <CardsList\n              isLoading={isLoading}\n              videos={videos}\n              cardsCount={cardsCount}\n            />\n            {videos.length > cardsCount && (\n              <div style={{ textAlign: \"center\" }}>\n                <div\n                  color=\"link\"\n                  onClick={loadMoreCards}\n                  style={{\n                    cursor: \"pointer\",\n                    fontWeight: 400,\n                    color: \"#0d6efd\",\n                    textDecoration: \"underline\"\n                  }}\n                >\n                  Load More...\n                </div>\n              </div>\n            )}\n          </>\n        )}\n      </Container>\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}